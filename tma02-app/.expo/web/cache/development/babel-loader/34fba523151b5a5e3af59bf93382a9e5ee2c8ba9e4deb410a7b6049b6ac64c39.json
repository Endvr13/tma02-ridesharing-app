{"ast":null,"code":"var _jsxFileName = \"D:\\\\OU\\\\TM352\\\\tma02\\\\tma02-app\\\\App.tsx\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport LoginScreen from './screens/LoginScreen';\nimport OwnerScreen from './screens/OwnerScreen';\nimport CustomerScreen from './screens/CustomerScreen';\nimport { NativeWindStyleSheet } from \"nativewind\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nNativeWindStyleSheet.setOutput({\n  default: \"native\"\n});\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  return _jsxDEV(NavigationContainer, {\n    children: _jsxDEV(Stack.Navigator, {\n      initialRouteName: \"Login\",\n      children: [_jsxDEV(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), _jsxDEV(Stack.Screen, {\n        name: \"Owner\",\n        component: OwnerScreen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), _jsxDEV(Stack.Screen, {\n        name: \"Customer\",\n        component: CustomerScreen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"names":["NavigationContainer","createNativeStackNavigator","LoginScreen","OwnerScreen","CustomerScreen","NativeWindStyleSheet","jsxDEV","_jsxDEV","setOutput","default","Stack","App","children","Navigator","initialRouteName","Screen","name","component","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/OU/TM352/tma02/tma02-app/App.tsx"],"sourcesContent":["/**\n * TM352 23J TMA02 Q1, code\n *\n * 26/10/2023 Intial version Chris Thomson\n * 14/12/2023 Line 74 modified to getDate rather than getDay Chris Thomson\n * \n * This is the main application code for the React Native application.\n * It is a simple application that allows a user to register a userid\n * and then make a taxi request or offer.\n * \n * The application uses the Expo framework to provide access to the\n * device GPS and to provide a simple UI.\n * \n * The application uses the TaxiService library to access the taxi\n * service API.\n * \n * The application uses the NominatimService library to access the\n * Nominatim service to lookup the address of the current GPS location.\n * \n * The application uses the TimePicker, AddressPicker and WaitTime\n * components to provide a simple UI.\n **/\n\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createNativeStackNavigator} from '@react-navigation/native-stack'\nimport LoginScreen from './screens/LoginScreen';\nimport OwnerScreen from './screens/OwnerScreen';\nimport CustomerScreen from './screens/CustomerScreen';\n\nimport { NativeWindStyleSheet } from \"nativewind\";\n\nNativeWindStyleSheet.setOutput({\n  default: \"native\",\n});\n\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\n/**\n * Defines the types for the RootStackParamList.\n * - `Login`: Represents the screen for user login.\n * - `Owner`: Represents the screen for the owner with the specified `userid`.\n * - `Customer`: Represents the screen for the customer with the specified `userid`.\n */\ntype RootStackParamList = {\n  Login: undefined;\n  Owner: {userid: string};\n  Customer: {userid: string}; \n};\n\nexport default function App() {\n  // The UI for the application.\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName='Login'>\n        <Stack.Screen name='Login' component={LoginScreen} />\n        <Stack.Screen name='Owner' component={OwnerScreen} />\n        <Stack.Screen name='Customer' component={CustomerScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n"],"mappings":";AAuBA,SAASA,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,0BAA0B,QAAO,gCAAgC;AAC1E,OAAOC,WAAW,MAAM,uBAAuB;AAC/C,OAAOC,WAAW,MAAM,uBAAuB;AAC/C,OAAOC,cAAc,MAAM,0BAA0B;AAErD,SAASC,oBAAoB,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElDF,oBAAoB,CAACG,SAAS,CAAC;EAC7BC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,IAAMC,KAAK,GAAGT,0BAA0B,CAAqB,CAAC;AAc9D,eAAe,SAASU,GAAGA,CAAA,EAAG;EAE5B,OACEJ,OAAA,CAACP,mBAAmB;IAAAY,QAAA,EAClBL,OAAA,CAACG,KAAK,CAACG,SAAS;MAACC,gBAAgB,EAAC,OAAO;MAAAF,QAAA,GACvCL,OAAA,CAACG,KAAK,CAACK,MAAM;QAACC,IAAI,EAAC,OAAO;QAACC,SAAS,EAAEf;MAAY;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACrDd,OAAA,CAACG,KAAK,CAACK,MAAM;QAACC,IAAI,EAAC,OAAO;QAACC,SAAS,EAAEd;MAAY;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACrDd,OAAA,CAACG,KAAK,CAACK,MAAM;QAACC,IAAI,EAAC,UAAU;QAACC,SAAS,EAAEb;MAAe;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAE1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}